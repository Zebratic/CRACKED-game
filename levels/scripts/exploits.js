////////////////////////////////////////////////////
//  This is a collection of exploits to have fun! //
////////////////////////////////////////////////////

// ========== [Air Jump] ==========
/*
setInterval(() => {
    this.player.isOnGround = true;
}, 10);
*/



// ========== [Flying Carpet Hack] ==========
/*
setInterval(() => {
    this.walls[0].collision = true;
    this.walls[0].width = this.player.width * 3;
    this.walls[0].height = 5;

    this.walls[0].x = this.player.position.x - (this.player.width / 2) * 2; 
    this.walls[0].y = this.player.position.y + this.player.height / 2 + 10;

    if (this.player.isCrouched)
        this.walls[0].y += 2;
}, 10);
*/




// ========== [Flying Rainbow Carpet Hack] ==========
/*
try { var lastHSB = 0; } catch (e) { }
setInterval(() => {
    this.walls[0].collision = true;
    this.walls[0].width = this.player.width * 3;
    this.walls[0].height = 5;

    this.walls[0].x = this.player.position.x - (this.player.width / 2) * 2; 
    this.walls[0].y = this.player.position.y + this.player.height / 2 + 10;

    if (this.player.isCrouched) 
        this.walls[0].y += 2;

    this.walls[0].color.r = (Math.sin(lastHSB * Math.PI / 180) + 1) * 127.5;
    this.walls[0].color.g = (Math.sin(lastHSB * Math.PI / 180 + 2) + 1) * 127.5;
    this.walls[0].color.b = (Math.sin(lastHSB * Math.PI / 180 + 4) + 1) * 127.5;
    lastHSB++;
    if (lastHSB > 360)
        lastHSB = 0;
}, 10);
*/


// ========== [Auto Pull Towards End Goal] ==========
/*
setInterval(() => {
    this.walls.forEach(wall => wall.collision = false);

    let angle = Math.atan2(this.endPosition.y - this.player.position.y, this.endPosition.x - this.player.position.x);
    this.player.velocity = { x: Math.cos(angle) * 5, y: Math.sin(angle) * 5 };
}, 1);
*/


// ========== [Move End Goal To Player] ==========
/*
setInterval(() => {
    let angle = Math.atan2(this.endPosition.y - this.player.position.y, this.endPosition.x - this.player.position.x);
    this.endPosition.x -= Math.cos(angle) * 2;
    this.endPosition.y -= Math.sin(angle) * 2;
}, 1);
*/